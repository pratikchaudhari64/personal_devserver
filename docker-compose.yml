# docker-compose.yml

services:
  # Nginx service definition
  nginx:
    image: nginx:stable-alpine
    container_name: personals_nginx
    ports:
      - "8000:80" # Map host port 8000 to container port 80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      # Nginx should only start after both application services are healthy
      notion_app:
        condition: service_healthy
      personal_website:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Personal Website service definition (Flask)
  personal_website:
    build:
      context: ./personal_website/minimalistic_python
      dockerfile: Dockerfile
    container_name: personals_website
    expose:
      - "3001" # Expose port 3000 to other services within the Docker network
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: "True"
    # volumes:
      # Optional: Mount static files and templates for development hot-reload
      # Remove these volumes in production
      # - ./personal_website/minimalistic_python/static:/app/static
      # - ./personal_website/minimalistic_python/templates:/app/templates
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # Notion application service definition (FastAPI)
  notion_app:
    build:
      context: ./notion_app
      dockerfile: Dockerfile
    container_name: personals_notion_app
    expose:
      - "5000"
    environment:
      FASTAPI_ENV: development
      # Add your NOTION_TOKEN here if needed
      # NOTION_TOKEN: ${NOTION_TOKEN}
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

# Define custom networks for inter-service communication
networks:
  app_network:
    driver: bridge